<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Election System</title>
    <link rel="stylesheet" href="styles.css">
</head>

<body>
    <div class="container">
        <h1>Online Election System</h1>
        <h2>Voter Registration</h2>
        <form id="voterForm">
            <label for="voterId">Voter ID:</label>
            <input type="text" id="voterId" required>
            <label for="voterName">Voter Name:</label>
            <input type="text" id="voterName" required>
            <label for="voterPassword">Password:</label>
            <input type="password" id="voterPassword" required>
            <button type="submit">Register Voter</button>
        </form>

        <h2>Candidate Registration</h2>
        <form id="candidateForm">
            <label for="candidateId">Candidate ID:</label>
            <input type="text" id="candidateId" required>
            <label for="candidateName">Candidate Name:</label>
            <input type="text" id="candidateName" required>
            <button type="submit">Register Candidate</button>
        </form>

        <h2>Cast Vote</h2>
        <form id="voteForm">
            <label for="voterId">Voter ID:</label>
            <input type="text" id="voterIdVote" required>
            <label for="candidateId">Candidate ID:</label>
            <input type="text" id="candidateIdVote" required>
            <button type="submit">Cast Vote</button>
        </form>

        <h2>Election Results</h2>
        <p id="winner">No winner yet</p>
    </div>
    <script src="script.js"></script>
</body>

</html>






@import url('https://fonts.googleapis.com/css2?family=Bree+Serif&family=Caveat:wght@400;700&family=Lobster&family=Monoton&family=Open+Sans:ital,wght@0,400;0,700;1,400;1,700&family=Playfair+Display+SC:ital,wght@0,400;0,700;1,700&family=Playfair+Display:ital,wght@0,400;0,700;1,700&family=Roboto:ital,wght@0,400;0,700;1,400;1,700&family=Source+Sans+Pro:ital,wght@0,400;0,700;1,700&family=Work+Sans:ital,wght@0,400;0,700;1,700&display=swap');

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f3e5ab;
    /* Pastel yellow */
}

.container {
    max-width: 800px;
    margin: 30px auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    background-color: #ffffff;
    /* White */
}

h1,
h2 {
    text-align: center;
    color: #1a237e;
    /* Dark blue */
}

form {
    display: flex;
    flex-direction: column;
    margin-bottom: 20px;
}

form label {
    margin-bottom: 5px;
    color: #311b92;
    /* Purple */
}

form input {
    padding: 5px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

form button {
    padding: 10px 20px;
    background-color: #ff6f00;
    /* Orange */
    color: #ffffff;
    /* White */
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

#results {
    text-align: center;
    color: #1a237e;
    /* Dark blue */
    margin-top: 30px;
}

/* Indian Flag Colors */
.container {
    background-image: linear-gradient(to bottom, #ff9933, #ffffff, #138808);
}





const voterForm = document.getElementById('voterForm');
const candidateForm = document.getElementById('candidateForm');
const voteForm = document.getElementById('voteForm');
const winnerElement = document.getElementById('winner');

voterForm.addEventListener('submit', (event) => {
    event.preventDefault();

    const voterId = document.getElementById('voterId').value;
    const voterName = document.getElementById('voterName').value;
    const voterPassword = document.getElementById('voterPassword').value;

    // Send voter registration data to the backend
    fetch('/voters', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: voterId,
                name: voterName,
                password: voterPassword
            }),
        })
        .then(response => response.json())
        .then(data => alert(`Voter registered: ${data.name}`))
        .catch(error => console.error('Error:', error));

    voterForm.reset();
});

candidateForm.addEventListener('submit', (event) => {
    event.preventDefault();

    const candidateId = document.getElementById('candidateId').value;
    const candidateName = document.getElementById('candidateName').value;

    // Send candidate registration data to the backend
    fetch('/candidates', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: candidateId,
                name: candidateName
            }),
        })
        .then(response => response.json())
        .then(data => alert(`Candidate registered: ${data.name}`))
        .catch(error => console.error('Error:', error));

    candidateForm.reset();
});

voteForm.addEventListener('submit', (event) => {
    event.preventDefault();

    const voterId = document.getElementById('voterIdVote').value;
    const candidateId = document.getElementById('candidateIdVote').value;

    // Send vote data to the backend
    fetch('/votes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                voterId,
                candidateId
            }),
        })
        .then(response => response.json())
        .then(data => alert(data.message))
        .catch(error => console.error('Error:', error));

    voteForm.reset();
});

// Fetch election results from the backend
function fetchResults() {
    fetch('/results')
        .then(response => response.json())
        .then(data => {
            if (data.winner) {
                winnerElement.textContent = `Winner: ${data.winner.name}`;
            } else {
                winnerElement.textContent = 'No winner yet';
            }
        })
        .catch(error => console.error('Error:', error));
}

// Fetch results every 5 seconds (for demonstration purposes)
fetchResults();
setInterval(fetchResults, 5000);
